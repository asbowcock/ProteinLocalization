%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function:    pde2DStabilityDriver
% 
% Version:     1.2
%
% Description: Creates a video of the two dimesional probabiliy density 
%              estimate (PDE) of quantum dots in a cell. The video shows 
%              how the 2D PDE, represented as a contour plot, changes as 
%              the number of quantum dots used in calculating the PDE 
%              increases. The contour plot is overlayed on an RGB image of 
%              the cell membrane (green), of the nuclear membrane (green), 
%              and of the QDs(magenta). A graph of the change in the PDE
%              with respect to the number of QDs is also displayed.
%
% Parameters:  outputVideoFile - file name of the output video 
%              outputGraphFile - file name of change in PDE graph
%              matFileName     - the .mat file containing the controller 
%                                class
%              cellNumber      - the particular cell containing the probes
%              xyCoords        - the x,y-coordinates of the probes
%              imageFile       - the file name of the image that the PDE 
%                                will be overlaid on

%
% Returned:    None
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pde2DStabilityDriver (outputVideoFile, outputGraphFile, ...
                               matFileName, cellNumber, xyCoords, ...
                               imageFile, xyCoordsResizeValues)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Constants  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FRAME_RATE = 1;
VIDEO_QUALITY = 100;
MIN_NUMBER_OF_QDS = 20;
LOWER_BOUND = -1000000; %nanometers
UPPER_BOUND = 1000000; %nanometers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Initialize input parser
theInputParser = inputParser;
theInputParser.addRequired ('outputVideoFile', @isstr);
theInputParser.addRequired ('outputGraphFile', @isstr);
theInputParser.addOptional ('matFileName', 0, @isstr);
theInputParser.addOptional ('cellNumber', 0, @isscalar);
theInputParser.addOptional ('xyCoords', [intmin, intmin]);
theInputParser.addOptional ('imageFile', 0, @isstr);
theInputParser.addOptional ('xyCoordsResizeValue', [0, 0]);

% Parse input parameters
theInputParser.parse (outputVideoFile, outputGraphFile, matFileName, ... 
                      cellNumber, xyCoords, imageFile, ...
                      xyCoordsResizeValues);

% Check for valid input data
if ((0 == matFileName) && (intmin == xyCoords))
    error ('Error: must pass .mat file or 2D array of x,y-coordinates');
end
        
% Initialize the video
theVideo = VideoWriter (outputVideoFile);
theVideo.Quality = VIDEO_QUALITY;
theVideo.FrameRate = FRAME_RATE;
open (theVideo);

% if .mat file has been passed in
if (0 ~= matFileName && intmin == xyCoords)
    
    % check for valid cell number
    if (0 == cellNumber)
        error ('Error: when passing .mat file, must pass a cell number greater than zero');
    else
        load (matFileName);

        % Get the QDs to be analyzed
        goodQDs = findGoodQDs (controller, cellNumber);
        selectQDs = selectQDsWithinRange (controller.distQDtoMembrane{cellNumber}(goodQDs), LOWER_BOUND, UPPER_BOUND);
        xyCoords = getXYCoords (getSelectedQDsXYZCoords (controller, cellNumber, selectQDs));
    end
    
    % no image file passed in, so use image in controller class
    if (0 == imageFile)
        overlayRGB = createRGBImageCellMemNucMemQD (controller, ...
                                                    goodSlices, cellNumber);
    else
        overlayRGB = imread (imageFile);
    end
% if array of x,y-coordinates has been passed in    
else
    if (0 == imageFile)
        error ('Error: when passing array of x,y-coordinates, must pass an image');
    else
        overlayRGB = imread (imageFile);
    end
end

% Declare array for storing change in PDE
prevPDE = 0;
pdeChange = zeros (length (xyCoords) - MIN_NUMBER_OF_QDS + 1, 1);
qdNumber = MIN_NUMBER_OF_QDS:length (xyCoords);

for qdCount = MIN_NUMBER_OF_QDS:length (xyCoords)

% Calculate the probability density estimate
[bandwidth, probDensity, xCoord, yCoord] = kde2d (xyCoords(1:qdCount,:));

% Calculate change in PDE and store value
pdeChange (qdCount - MIN_NUMBER_OF_QDS + 1) = calculatePDEChange (probDensity, prevPDE);
prevPDE = probDensity;

% Parse the contour matrix in preparation for plotting the 2D contour plot
contourMatrix = getContourMatrix (xCoord, yCoord, probDensity);
contourMatrix = contourMatrix';
[separatedContourMatrix, numContours] = separateContourMatrix (contourMatrix);

% Display RGB image
imagesc (overlayRGB);

% Plot contour map of 2D PDE over RGB image
plotContourMap2D (separatedContourMatrix, numContours);

% Display number of QDs on 2D contour plot
displayNumberQDs (qdCount);

% Capture current frame and write to the video
writeVideo (theVideo, getframe (gcf));
close (gcf);

end

close (theVideo);

% Plot change in PDE
hFig = figure;
plot (qdNumber', pdeChange);
xlabel ('Number of QDs');
ylabel ('Change in PDE');
print (hFig, '-dpng', outputGraphFile);

end

